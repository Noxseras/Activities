package activity3n4;

import java.util.Random;

public class Duplicates {

    //GENERATE random numbers for the array with range from 0-99
    private static int randomNumbers() {
        Random random = new Random();
        return random.nextInt(100);
    }

    // STORE the values
    public static int[] store(int[] arr) {

        // Store the random numbers to the array
        for (int i = 0; i < arr.length; i++) {
            // store every random number to each, separate, index
            arr[i] = randomNumbers();
        }
        // return the array
        return arr;
    }
    // SORT the array then return it sorted
    public static void sort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // swap arr[j+1] and arr[j]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    /*
    Find if there are any duplicates, if there are, assign the array to the new array. Afterwards, replace the empty
    indexes with a random number. If there are not any duplicates, do nothing
    */
    public static void duplicateElements(int[] arr, int[] copied){
        // Generate a random number
        int randomNumber = randomNumbers();
        int index = 0;
        for(int i = 0; i < arr.length -1;i++){
            if (arr[i] != arr[i+1]){
                copied[index] = arr[i];
                index++;
            }
        }
        /*
         Add the last element of the array. Inside the method, the length will end 1 index before the last, which at
         the end, it will not include the last element.
        */
        copied[index] = arr[arr.length - 1];
        // add random numbers to the empty index
        for (int k = 0; k < copied.length; k++) {
            /* check if there are any elements empty(or 0) then add to that index a random number(which it will
            be generated by the randomNumbers() method
            */
            if (copied[k] == 0 && randomNumber != copied[k]) {
                copied[k] = randomNumber;
                //TODO: make a recursion to check again if the array has signed same elements
            }
        }
    }
}

